head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2014.05.30.19.47.58;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.05.27.20.40.23;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.05.24.05.02.59;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: logstream.h,v 1.2 2014-05-27 13:40:23-07 - - $

//
// class logstream
// replacement for initial cout so that each call to a logstream
// will prefix the line of output with an identification string
// and a process id.  Template functions must be in header files
// and the others are trivial.
//

#ifndef __LOGSTREAM_H__
#define __LOGSTREAM_H__

#include <cassert>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

#include <sys/types.h>
#include <unistd.h>

class logstream {
   private:
      ostream& out;
      string execname_;
   public:

      // Constructor may or may not have the execname available.
      logstream (ostream& out, const string& execname = ""):
                 out (out), execname_ (execname) {
      }

      // First line of main should execname if logstream is global.
      void execname (const string& name) { execname_ = name; }
      string execname() { return execname_; }

      // First call should be the logstream, not cout.
      // Then forward result to the standard ostream.
      template <typename T>
      ostream& operator<< (const T& obj) {
         assert (execname_.size() > 0);
         out << execname_ << "(" << getpid() << "): " << obj;
         return out;
      }

};

#endif

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: logstream.h,v 1.1 2014-05-23 22:02:59-07 - - $
d34 2
a35 2
      // First line of main should set_execname if logstream is global.
      void set_execname (const string& name) { execname_ = name; }
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: logstream.h,v 1.1 2014-05-23 21:09:42-07 - - $
d26 1
a26 1
      string execname;
d31 1
a31 1
                 out (out), execname (execname) {
d35 2
a36 1
      void set_execname (const string& name) { execname = name; }
d42 2
a43 2
         assert (execname.size() > 0);
         out << execname << "(" << getpid() << "): " << obj;
@
